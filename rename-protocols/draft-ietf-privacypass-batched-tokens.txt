



Network Working Group                                          R. Robert
Internet-Draft                                               Phoenix R&D
Intended status: Standards Track                              C. A. Wood
Expires: 12 November 2025                                     Cloudflare
                                                              T. Meunier
                                                         Cloudflare Inc.
                                                             11 May 2025


                    Batched Token Issuance Protocol
              draft-ietf-privacypass-batched-tokens-latest

Abstract

   This document specifies two variants of the Privacy Pass issuance
   protocol that allow for batched issuance of tokens.  These allow
   clients to request more than one token at a time and for issuers to
   issue more than one token at a time.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 12 November 2025.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Change Log:
   2.  Introduction
     2.1.  Terminology
   3.  Motivation
   4.  Presentation Language
     4.1.  Optional Value
     4.2.  Variable-Size Vector Length Headers
   5.  Amortized Privately Verifiable Token Batch Issuance
     5.1.  Client-to-Issuer Request
     5.2.  Issuer-to-Client Response
     5.3.  Finalization
   6.  Generic Token Batch Issuance
     6.1.  Client-to-Issuer Request
     6.2.  Issuer-to-Client Response
     6.3.  Finalization
   7.  Security considerations
     7.1.  Amortized Privately Verifiable Token Batch Issuance
     7.2.  Generic Token Batch Issuance
   8.  IANA considerations
     8.1.  Token Type
     8.2.  Media Types
       8.2.1.  "application/private-token-amortized-batch-request"
               media type
       8.2.2.  "application/private-token-amortized-batch-response"
               media type
       8.2.3.  "application/private-token-generic-batch-request" media
               type
       8.2.4.  "application/private-token-generic-batch-response"
               media type
   9.  References
     9.1.  Normative References
     9.2.  Informative References
   Authors' Addresses

1.  Change Log:

   RFC EDITOR PLEASE DELETE THIS SECTION.

   draft-04

   *  Rename the issuance variants

   *  Clarify media types

   *  Make generic issuance more generic byt prefixing requests &
      responses with token type

   draft-03

   *  Arbitrary token types

   *  Error code 400 aligned with RFC9578 and replaced by error code 422

   draft-02

   *  Renaming TokenRequest to BatchTokenRequest and TokenResponse to
      BatchTokenResponse

   *  IANA: Media types for BatchTokenRequest and BatchTokenResponse

   *  IANA: Expand Token Type registry entry

   *  Various editorial fixes

   draft-01

   *  Initial WG document version

2.  Introduction

   This document specifies two variants of Privacy Pass issuance
   protocols (as defined in [RFC9576]) that allow for batched issuance
   of tokens.  This allows clients to request more than one token at a
   time and for issuers to issue more than one token at a time.

   The base Privacy Pass issuance protocol [RFC9578] defines stateless
   anonymous tokens, which can either be publicly verifiable or not.
   While it is possible to run multiple instances of the issuance
   protocol in parallel, e.g., over a multiplexed transport such as
   HTTP/3 [HTTP3] or by orchestrating multiple HTTP requests, these ad-
   hoc solutions vary based on transport protocol support.  In addition,
   in some cases, they cannot take advantage of cryptographic
   optimizations.

   The first variant of the issuance protocol builds upon the privately
   verifiable issuance protocol in [RFC9578] that uses VOPRF [OPRF], and
   allows for batched issuance of tokens and amortizes the cost of zero
   knowledge proofs.  This allows clients to request more than one token
   at a time and for issuers to issue more than one token at a time.  In
   effect, private batched issuance performance scales better than
   linearly.

   The second variant of the issuance protocol introduces a new Client-
   Issuer communication method, which allows for batched issuance of
   generic token types.  This allows clients to request more than one
   token at a time and for issuers to issue more than one token at a
   time.  This variant has no other effect than batching requests and
   responses and the issuance performance remains linear.

   This document registers a new token type (Section 8.1) that can
   either be used with the Privately Verifiable Issuance Protocol as
   defined in [RFC9578], or with the Amortized Privately Verifiable
   Batch Issuance Protocol defined below.

2.1.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  Motivation

   Privacy Pass tokens (as defined in [RFC9576] and [RFC9578]) are
   unlinkable during issuance and redemption.  The basic issuance
   protocols defined in [RFC9578], however, only allow for a single
   token to be issued at a time for every challenge.  In some cases,
   especially where a large number of clients need to fetch a large
   number of tokens, this may introduce performance bottlenecks.

   Amortzed Privately Verifiable Token Issuance Section 5 improves upon
   the basic Privately Verifiable Token issuance protocol in the
   following key ways:

   1.  Issuing multiple tokens at once in response to a single
       TokenChallenge, thereby reducing the size of the proofs required
       for multiple tokens.

   2.  Improving server and client issuance efficiency by amortizing the
       cost of the VOPRF proof generation and verification,
       respectively.

   Generic Token Batch Issuance Section 6 allows for a single
   GenericBatchTokenRequest to be sent that encompasses multiple token
   requests.  This improves upon the basic issuance protocols defined in
   [RFC9578] in the following key ways:

   1.  Issuing multiple tokens at once of the same type with different
       keys.

   2.  Issuing multiple tokens at once of different types.

4.  Presentation Language

   This document uses the TLS presentation language [RFC8446] to
   describe the structure of protocol messages.  In addition to the base
   syntax, it uses two additional features: the ability for fields to be
   optional and the ability for vectors to have variable-size length
   headers.

4.1.  Optional Value

   An optional value is encoded with a presence-signaling octet,
   followed by the value itself if present.  When decoding, a presence
   octet with a value other than 0 or 1 MUST be rejected as malformed.

   struct {
       uint8 present;
       select (present) {
           case 0: struct{};
           case 1: T value;
       };
   } optional<T>;

4.2.  Variable-Size Vector Length Headers

   In the TLS presentation language, vectors are encoded as a sequence
   of encoded elements prefixed with a length.  The length field has a
   fixed size set by specifying the minimum and maximum lengths of the
   encoded sequence of elements.

   In this document, there are several vectors whose sizes vary over
   significant ranges.  So instead of using a fixed-size length field,
   it uses a variable-size length using a variable-length integer
   encoding based on the one described in Section 16 of [RFC9000].  They
   differ only in that the one here requires a minimum-size encoding.
   Instead of presenting min and max values, the vector description
   simply includes a V.  For example:

   struct {
       uint32 fixed<0..255>;
       opaque variable<V>;
   } StructWithVectors;

5.  Amortized Privately Verifiable Token Batch Issuance

   This section describes a batched issuance protocol for select token
   types, including 0x0001 (defined in [RFC9578]) and 0x0005 (defined in
   this document).  This variant is more efficient than Generic Token
   Batch Issuance defined below.  It does so by requiring the same key
   to be used by all token requests.

5.1.  Client-to-Issuer Request

   Except where specified otherwise, the client follows the same
   protocol as described in [RFC9578], Section 5.1.

   The Client first creates a context as follows:

   client_context = SetupVOPRFClient(ciphersuiteID, pkI)

   ciphersuiteID is the ciphersuite identifier from [OPRF] corresponding
   to the ciphersuite being used for this token version.
   SetupVOPRFClient is defined in [OPRF], Section 3.2.

   Nr denotes the number of tokens the clients wants to request.  For
   every token, the Client then creates an issuance request message for
   a random value nonce with the input challenge and Issuer key
   identifier as described below:

   nonce_i = random(32)
   challenge_digest = SHA256(challenge)
   token_input = concat(token_type, nonce_i, challenge_digest,
                   token_key_id)
   blind_i, blinded_element_i = client_context.Blind(token_input)

   token_type corresponds to the 2-octet integer in the challenge.

   The above is repeated for each token to be requested.  Importantly, a
   fresh nonce MUST be sampled each time.

   The Client then creates a BatchTokenRequest structured as follows:

   struct {
       uint8_t blinded_element[Ne];
   } BlindedElement;

   struct {
      uint16_t token_type;
      uint8_t truncated_token_key_id;
      BlindedElement blinded_elements<V>;
   } AmortizedBatchTokenRequest;

   The structure fields are defined as follows:

   *  "token_type" is a 2-octet integer, which matches the type in the
      challenge.

   *  "truncated_token_key_id" is the least significant byte of the
      token_key_id in network byte order (in other words, the last 8
      bits of token_key_id).

   *  "blinded_elements" is a list of Nr serialized elements, each of
      length Ne bytes and computed as
      SerializeElement(blinded_element_i), where blinded_element_i is
      the i-th output sequence of Blind invocations above.  Ne is as
      defined in [OPRF], Section 4.

   The Client then generates an HTTP POST request to send to the Issuer
   Request URL, with the AmortizedBatchTokenRequest as the content.  The
   media type for this request MUST be "application/private-token-
   amortized-batch-request".  If not, the Issuer responds with status
   code 415.  An example request for the Issuer Request URL
   "https://issuer.example.net/request" is shown below.

   POST /request HTTP/1.1
   Host: issuer.example.net
   Accept: application/private-token-amortized-batch-response
   Content-Type: application/private-token-amortized-batch-request
   Content-Length: <Length of AmortizedBatchTokenRequest>

   <Bytes containing the AmortizedBatchTokenRequest>

5.2.  Issuer-to-Client Response

   Except where specified otherwise, the client follows the same
   protocol as described in [RFC9578], Section 5.2.

   Upon receipt of the request, the Issuer validates the following
   conditions:

   *  The AmortizedBatchTokenRequest contains a supported token_type of
      the privatley verifiable token kind.

   *  The AmortizedBatchTokenRequest.truncated_token_key_id corresponds
      to a key ID of a Public Key owned by the issuer.

   *  Nr, as determined based on the size of
      AmortizedBatchTokenRequest.blinded_elements, is less than or equal
      to the number of tokens that the issuer can issue in a single
      batch.

   If any of these conditions is not met, the Issuer MUST return an HTTP
   422 (Unprocessable Content) error to the client.

   The Issuer then tries to deseralize the i-th element of
   AmortizedBatchTokenRequest.blinded_elements using DeserializeElement
   from Section 2.1 of [OPRF], yielding blinded_element_i of type
   Element.  If this fails for any of the
   AmortizedBatchTokenRequest.blinded_elements values, the Issuer MUST
   return an HTTP 422 (Unprocessable Content) error to the client.
   Otherwise, if the Issuer is willing to produce a token to the Client,
   the issuer forms a list of Element values, denoted blinded_elements,
   and computes a blinded response as follows:

   server_context = SetupVOPRFServer(ciphersuiteID, skI, pkI)
   evaluated_elements, proof =
     server_context.BlindEvaluateBatch(skI, blinded_elements)

   ciphersuiteID is the ciphersuite identifier from [OPRF] corresponding
   to the ciphersuite being used for this token version.
   SetupVOPRFServer is defined in [OPRF], Section 3.2.  The issuer uses
   a list of blinded elements to compute in the proof generation step.
   The BlindEvaluateBatch function is a batch-oriented version of the
   BlindEvaluate function described in [OPRF], Section 3.3.2.  The
   description of BlindEvaluateBatch is below.

   Input:

     Element blindedElements[Nr]

   Output:

     Element evaluatedElements[Nr]
     Proof proof

   Parameters:

     Group G
     Scalar skS
     Element pkS

   def BlindEvaluateBatch(blindedElements):
     evaluatedElements = []
     for blindedElement in blindedElements:
       evaluatedElements.append(skS * blindedElement)

     proof = GenerateProof(skS, G.Generator(), pkS,
                           blindedElements, evaluatedElements)
     return evaluatedElements, proof

   The Issuer then creates a AmortizedBatchTokenResponse structured as
   follows:

   struct {
       uint8_t evaluated_element[Ne];
   } EvaluatedElement;

   struct {
      EvaluatedElement evaluated_elements<V>;
      uint8_t evaluated_proof[Ns + Ns];
   } AmortizedBatchTokenResponse;

   The structure fields are defined as follows:

   *  "evaluated_elements" is a list of Nr serialized elements, each of
      length Ne bytes and computed as
      SerializeElement(evaluate_element_i), where evaluate_element_i is
      the i-th output of BlindEvaluate.

   *  "evaluated_proof" is the (Ns+Ns)-octet serialized proof, which is
      a pair of Scalar values, computed as
      concat(SerializeScalar(proof[0]), SerializeScalar(proof[1])),
      where Ns is as defined in [OPRF], Section 4.

   The Issuer MUST generate an HTTP response with status code 200 whose
   content consists of AmortizedBatchTokenResponse, with the content
   type set as "application/private-token-amorrized-batch-response".
   Clients MUST ignore the response if the status code is not 200 or if
   the content type is not "application/private-token-amortized-batch-
   response".

   HTTP/1.1 200 OK
   Content-Type: application/private-token-amortized-batch-response
   Content-Length: <Length of AmortizedBatchTokenResponse>

   <Bytes containing the AmortizedBatchTokenResponse>

5.3.  Finalization

   Upon receipt, the Client handles the response and, if successful,
   deserializes the body values
   AmortizedBatchTokenResponse.evaluate_response and
   AmortizedBatchTokenResponse.evaluate_proof, yielding
   evaluated_elements and proof.  If deserialization of either value
   fails, the Client aborts the protocol.  Otherwise, the Client
   processes the response as follows:

 authenticator_values = client_context.FinalizeBatch(token_input, blind,
                          evaluated_elements, blinded_elements, proof)

   The FinalizeBatch function is a batched variant of the Finalize
   function as defined in [OPRF], Section 3.3.2.  FinalizeBatch accepts
   lists of evaluated elements and blinded elements as input parameters,
   and is implemented as described below:

  Input:

    PrivateInput input
    Scalar blind
    Element evaluatedElements[Nr]
    Element blindedElements[Nr]
    Proof proof

  Output:

    opaque output[Nh * Nr]

  Parameters:

    Group G
    Element pkS

  Errors: VerifyError

  def FinalizeBatch(input, blind,
    evaluatedElements, blindedElements, proof):
    if VerifyProof(G.Generator(), pkS, blindedElements,
                   evaluatedElements, proof) == false:
      raise VerifyError

    output = nil
    for evaluatedElement in evaluatedElements:
      N = G.ScalarInverse(blind) * evaluatedElement
      unblindedElement = G.SerializeElement(N)
      hashInput = I2OSP(len(input), 2) || input ||
                  I2OSP(len(unblindedElement), 2) || unblindedElement ||
                  "Finalize"
      output = concat(output, Hash(hashInput))

    return output

   If this succeeds, the Client then constructs Nr Token values, where
   authenticator is the i-th Nh-byte length slice of
   authenticator_values that corresponds to nonce, the i-th nonce that
   was sampled in Section 5.1:

   struct {
       uint16_t token_type;
       uint8_t nonce[32];
       uint8_t challenge_digest[32];
       uint8_t token_key_id[32];
       uint8_t authenticator[Nh];
   } Token;

   If the FinalizeBatch function fails, the Client aborts the protocol.
   Token verification works exactly as specified in [RFC9578].

6.  Generic Token Batch Issuance

   This section describes an issuance protocol mechanism for issuing
   multiple tokens in one round trip between Client and Issuer.  An
   generic batch token request can contain token requests for any token
   type.

6.1.  Client-to-Issuer Request

   The Client first generates all of the individual TokenRequest
   structures that are intended to be batched together.  This request
   creation follows the protocol describing issuance, such as [RFC9578],
   Section 5.1 or [RFC9578], Section 6.1.

   The Client then creates a GenericBatchedTokenRequest structure as
   follows:

   struct {
      uint16_t token_type;
      select (token_type) {
         case (0x0001): /* Type VOPRF(P-384, SHA-384), RFC 9578 */
            TokenRequest token_request;
         case (0x0002): /* Type Blind RSA (2048-bit), RFC 9578 */
             TokenRequest token_request;
         case (0x0005): /* Type VOPRF(ristretto255, SHA-512), RFC 9578 */
             TokenRequest token_request;
      }
   } GenericTokenRequest;

   struct {
     GenericTokenRequest generic_token_requests<V>;
   } GenericBatchTokenRequest

   The structure fields are defined as follows:

   *  GenericBatchTokenRequest's "token_type" is a 2-octet integer.  The
      rest of the structure follows with the TokenRequest based on that
      type.  A TokenRequest with a token type not defined in [RFC9578]
      MAY.

   *  "token_requests" is an array of GenericTokenRequest satisfying the
      above constraint.

   The Client then generates an HTTP POST request to send to the Issuer
   Request URL, with the GenericBatchTokenRequest as the content.  The
   media type for this request MUST be "application/private-token-
   generic-batch-request".  If not, the Issuer responds with status code
   415.  An example request for the Issuer Request URL
   "https://issuer.example.net/request" is shown below.

   POST /request HTTP/1.1
   Host: issuer.example.net
   Accept: application/private-token-generic-batch-response
   Content-Type: application/private-token-generic-batch-request
   Content-Length: <Length of GenericBatchTokenRequest>

   <Bytes containing the GenericBatchTokenRequest>

6.2.  Issuer-to-Client Response

   Upon receipt of the request, the Issuer validates the following
   conditions:

   *  The Content-Type is application/private-token-generic-batch-
      request as registered with IANA.

   If this condition is not met, the Issuer MUST return an HTTP 422
   (Unprocessable Content) error to the client.

   The Issuer then tries to deserialize the first 2 bytes of the i-th
   element of GenericBatchTokenRequest.token_requests.  If this is not a
   token type registered with IANA, the Issuer MUST return an HTTP 422
   (Unprocessable Content) error to the client.  The issuer creates a
   GenericBatchTokenResponse structured as follows:

   struct {
     uint16_t token_type;
     select (token_type) {
       case (0x0001): /* Type VOPRF(P-384, SHA-384), RFC 9578 */
         uint8_t evaluated_msg[Ne];
         uint8_t evaluated_proof[Ns + Ns];
       case (0x0002): /* Type Blind RSA (2048-bit), RFC 9578 */
         uint8_t blind_sig[Nk];
     }
   } TokenResponse;

   struct {
     optional<TokenResponse> token_response; /* Defined by token_type */
   } OptionalTokenResponse;

   struct {
     OptionalTokenResponse token_responses<V>;
   } GenericBatchTokenResponse

   GenericBatchTokenResponse.token_responses is a variable-size vector
   of OptionalTokenResponses.  OptionalTokenResponse.token_response is
   an optional TokenResponse (as specified in Section 4.1) , where an
   absence of TokenResponse indicates that the Issuer failed or refused
   to issue the associated TokenRequest.

   The Issuer MUST generate an HTTP response with status code 200 whose
   content consists of TokenResponse, with the content type set as
   "application/private-token-generic-batch-response".  Clients MUST
   ignore the response if the status code is not 200 or if the content
   type is not "application/private-token-generic-batch-response".

   HTTP/1.1 200 OK
   Content-Type: application/private-token-generic-batch-response
   Content-Length: <Length of GenericBatchTokenResponse>

   <Bytes containing the GenericBatchTokenResponse>

   If the Issuer issues some but not all tokens, it MUST return an HTTP
   206 error to the client and continue processing subsequent requests.
   For instance, an Issuer MAY return an HTTP 206 error if requests for
   tokens of the same token type refer to more than one
   truncated_token_key_id.

   If the Issuer decides not to issue any tokens, it MUST return an HTTP
   400 to the client.

6.3.  Finalization

   The Client tries to deserialize the i-th element of
   GenericBatchTokenResponse.token_responses using the protocol
   associated to GenericBatchTokenRequest.token_type.  If the element
   has a size of 0, the Client MUST ignore this token, and continue
   processing the next token.  The Client finalizes each deserialized
   TokenResponse using the matching TokenRequest according to the
   corresponding finalization procedure defined by the token type.

7.  Security considerations

7.1.  Amortized Privately Verifiable Token Batch Issuance

   Implementors SHOULD be aware of the security considerations described
   in [OPRF], Section 6.2.3 and implement mitigation mechanisms.
   Application can mitigate this issue by limiting the number of clients
   and limiting the number of token requests per client per key.

7.2.  Generic Token Batch Issuance

   Implementors SHOULD be aware of the inherent linear cost of this
   token type.  An Issuer MAY ignore TokenRequest if the number of
   tokens per request past a limit.

8.  IANA considerations

   This section contains IANA codepoint allocation requests.

8.1.  Token Type

   This document updates the "Token Type" Registry ([AUTHSCHEME]) with
   the following entry:

   *  Value: 0x0005 (suggested)

   *  Name: VOPRF (ristretto255, SHA-512)

   *  Token Structure: As defined in Section 2.2 of [AUTHSCHEME]

   *  Token Key Encoding: Serialized using SerializeElement from
      Section 2.1 of [OPRF]

   *  TokenChallenge Structure: As defined in Section 2.1 of
      [AUTHSCHEME]

   *  Publicly Verifiable: N

   *  Public Metadata: N

   *  Private Metadata: N

   *  Nk: 32

   *  Nid: 32

   *  Change controller: IETF

   *  Reference: [RFC9578], Section 5

   *  Notes: None

8.2.  Media Types

   The following entries should be added to the IANA "media types"
   registry:

   *  "application/private-token-amortized-batch-request"

   *  "application/private-token-amortized-batch-response"

   *  "application/private-token-generic-batch-request"

   *  "application/private-token-generic-batch-response"

   The templates for these entries are listed below and the reference
   should be this RFC.

8.2.1.  "application/private-token-amortized-batch-request" media type

   Type name:  application
   Subtype name:  private-token-amortized-batch-request
   Required parameters:  N/A
   Optional parameters:  N/A
   Encoding considerations:  "binary"
   Security considerations:  see Section 7
   Interoperability considerations:  N/A
   Published specification:  this specification
   Applications that use this media type:  Applications that want to
      issue or facilitate issuance of Privacy Pass Amortized Privately
      Verifiable tokens as defined in Section 5, including Privacy Pass
      issuer applications themselves.
   Fragment identifier considerations:  N/A
   Additional information:  Magic number(s):  N/A
                            Deprecated alias names for this type:  N/A
                            File extension(s):  N/A
                            Macintosh file type code(s):  N/A
   Person and email address to contact for further information:  see Aut
      hors' Addresses section
   Intended usage:  COMMON
   Restrictions on usage:  N/A
   Author:  see Authors' Addresses section
   Change controller:  IETF

8.2.2.  "application/private-token-amortized-batch-response" media type

   Type name:  application
   Subtype name:  private-token-amortized-batch-response
   Required parameters:  N/A
   Optional parameters:  N/A
   Encoding considerations:  "binary"
   Security considerations:  see Section 7
   Interoperability considerations:  N/A
   Published specification:  this specification
   Applications that use this media type:  Applications that want to
      issue or facilitate issuance of Privacy Pass Amortized Privately
      Verifiable tokens as defined in Section 5, including Privacy Pass
      issuer applications themselves.
   Fragment identifier considerations:  N/A
   Additional information:  Magic number(s):  N/A
                            Deprecated alias names for this type:  N/A
                            File extension(s):  N/A
                            Macintosh file type code(s):  N/A
   Person and email address to contact for further information:  see Aut
      hors' Addresses section
   Intended usage:  COMMON
   Restrictions on usage:  N/A
   Author:  see Authors' Addresses section
   Change controller:  IETF

8.2.3.  "application/private-token-generic-batch-request" media type

   Type name:  application
   Subtype name:  private-token-generic-batch-request
   Required parameters:  N/A
   Optional parameters:  N/A
   Encoding considerations:  "binary"
   Security considerations:  see Section 7
   Interoperability considerations:  N/A
   Published specification:  this specification
   Applications that use this media type:  Applications that want to
      issue or facilitate issuance of Privacy Pass Generic tokens as
      defined in Section 6, including Privacy Pass issuer applications
      themselves.
   Fragment identifier considerations:  N/A
   Additional information:  Magic number(s):  N/A
                            Deprecated alias names for this type:  N/A
                            File extension(s):  N/A
                            Macintosh file type code(s):  N/A
   Person and email address to contact for further information:  see Aut
      hors' Addresses section
   Intended usage:  COMMON
   Restrictions on usage:  N/A
   Author:  see Authors' Addresses section
   Change controller:  IETF

8.2.4.  "application/private-token-generic-batch-response" media type

   Type name:  application
   Subtype name:  private-token-generic-batch-response
   Required parameters:  N/A
   Optional parameters:  N/A
   Encoding considerations:  "binary"
   Security considerations:  see Section 7
   Interoperability considerations:  N/A
   Published specification:  this specification
   Applications that use this media type:  Applications that want to
      issue or facilitate issuance of Privacy Pass Generic tokens as
      defined in Section 6, including Privacy Pass issuer applications
      themselves.
   Fragment identifier considerations:  N/A
   Additional information:  Magic number(s):  N/A
                            Deprecated alias names for this type:  N/A
                            File extension(s):  N/A
                            Macintosh file type code(s):  N/A
   Person and email address to contact for further information:  see Aut
      hors' Addresses section
   Intended usage:  COMMON
   Restrictions on usage:  N/A
   Author:  see Authors' Addresses section
   Change controller:  IETF

9.  References

9.1.  Normative References

   [AUTHSCHEME]
              Pauly, T., Valdez, S., and C. A. Wood, "The Privacy Pass
              HTTP Authentication Scheme", RFC 9577,
              DOI 10.17487/RFC9577, June 2024,
              <https://www.rfc-editor.org/rfc/rfc9577>.

   [OPRF]     Davidson, A., Faz-Hernandez, A., Sullivan, N., and C. A.
              Wood, "Oblivious Pseudorandom Functions (OPRFs) Using
              Prime-Order Groups", RFC 9497, DOI 10.17487/RFC9497,
              December 2023, <https://www.rfc-editor.org/rfc/rfc9497>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC8446]  Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", RFC 8446, DOI 10.17487/RFC8446, August 2018,
              <https://www.rfc-editor.org/rfc/rfc8446>.

   [RFC9576]  Davidson, A., Iyengar, J., and C. A. Wood, "The Privacy
              Pass Architecture", RFC 9576, DOI 10.17487/RFC9576, June
              2024, <https://www.rfc-editor.org/rfc/rfc9576>.

   [RFC9578]  Celi, S., Davidson, A., Valdez, S., and C. A. Wood,
              "Privacy Pass Issuance Protocols", RFC 9578,
              DOI 10.17487/RFC9578, June 2024,
              <https://www.rfc-editor.org/rfc/rfc9578>.

9.2.  Informative References

   [HTTP3]    Bishop, M., Ed., "HTTP/3", RFC 9114, DOI 10.17487/RFC9114,
              June 2022, <https://www.rfc-editor.org/rfc/rfc9114>.

   [RFC9000]  Iyengar, J., Ed. and M. Thomson, Ed., "QUIC: A UDP-Based
              Multiplexed and Secure Transport", RFC 9000,
              DOI 10.17487/RFC9000, May 2021,
              <https://www.rfc-editor.org/rfc/rfc9000>.

Authors' Addresses

   Raphael Robert
   Phoenix R&D
   Email: ietf@raphaelrobert.com


   Christopher A. Wood
   Cloudflare
   Email: caw@heapingbits.net


   Thibault Meunier
   Cloudflare Inc.
   Email: ot-ietf@thibault.uk
